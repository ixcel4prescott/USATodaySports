# Python 2.7 stdlib

## 2. Built-in functions

__builtin__.abs = \
  :type number: T \n\
  :rtype: T or unknown \n\

__builtin__.all = \
  :type iterable: collections.Iterable \n\
  :rtype: bool \n\

__builtin__.any = \
  :type iterable: collections.Iterable \n\
  :rtype: bool \n\

__builtin__.bin = \
  :type number: int or long or float or complex \n\
  :rtype: bytes \n\

__builtin__.callable = \
  :rtype: bool \n\

__builtin__.chr = \
  :type i: int \n\
  :rtype: bytes \n\

__builtin__.dir = \
  :rtype: list of bytes \n\

__builtin__.divmod = \
  :type x: int or long or float or complex \n\
  :type y: int or long or float or complex \n\
  :rtype: (int or long or float or unknown, int or long or float or unknown) \n\

__builtin__.enumerate.__init__ = \
  :type iterable: collections.Iterable of T \n\
  :type start: int or long \n\
  :rtype: enumerate of (int, T) \n\

__builtin__.enumerate.__iter__ = \
  :rtype: enumerate of (int, T) \n\

__builtin__.enumerate.next = \
  :rtype: (int, T) \n\

__builtin__.filter = \
  :type function_or_none: collections.Callable or None \n\
  :type sequence: collections.Iterable of T \n\
  :rtype: list of T \n\

__builtin__.filter.1 = \
  :type sequence: bytes \n\
  :rtype: bytes \n\

__builtin__.filter.2 = \
  :type sequence: unicode \n\
  :rtype: unicode \n\

__builtin__.filter.3 = \
  :type sequence: tuple \n\
  :rtype: tuple \n\

__builtin__.getattr = \
  :type name: string \n\
  :rtype: object or unknown \n\

__builtin__.globals = \
  :rtype: dict of (string, unknown)

__builtin__.hasattr = \
  :type name: string \n\
  :rtype: bool \n\

__builtin__.hash = \
  :rtype: int \n\

__builtin__.iter = \
  :type source: collections.Iterable of T \n\
  :rtype: collections.Iterator of T \n\

__builtin__.len = \
  :type p_object: collections.Sized \n\
  :rtype: int \n\

__builtin__.locals = \
  :rtype: dict of (string, unknown)

__builtin__.map = \
  :type function: collections.Callable or None \n\
  :type sequence: collections.Iterable \n\
  :rtype: list \n\

__builtin__.next = \
  :type iterator: collections.Iterator of T \n\
  :rtype: T \n\

__builtin__.open = \
  :type name: string \n\
  :type mode: string \n\
  :type buffering: int \n\
  :type encoding: string or None \n\
  :type errors: string or None \n\
  :rtype: file \n\

__builtin__.open.1 = \
  :type mode: unicode \n\
  :rtype: io.TextIOWrapper of unicode \n\

__builtin__.open.2 = \
  :type mode: bytes \n\
  :rtype: io.FileIO of bytes \n\

__builtin__.ord = \
  :type c: string \n\
  :rtype: int \n\

__builtin__.pow = \
  :type x: int or long or float or complex \n\
  :type y: int or long or float or complex \n\
  :rtype: int or long or float or unknown \n\

__builtin__.range = \
  :type start: int or None \n\
  :type stop: int or None \n\
  :type step: int or None \n\
  :rtype: list of int \n\

__builtin__.reduce = \
  :type function: collections.Callable \n\
  :type sequence: collections.Iterable \n\
  :type initial: object or None \n\
  :rtype: object or unknown \n\

__builtin__.round = \
  :type number: int or long or float \n\
  :type ndigits: int or long or float or None \n\
  :rtype: float \n\

__builtin__.vars = \
  :rtype: dict of (string, unknown)

__builtin__.xrange.__init__ = \
  :type start: int \n\
  :rtype: xrange of int \n\


## 5.4. Numeric types

__builtin__.int.__init__ = \
  :type x: object \n\
  :type base: bool or int or long or float or complex or None \n\
  :rtype: int \n\

__builtin__.int.__add__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__sub__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__mul__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__floordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__mod__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__pow__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__lshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__and__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__or__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__xor__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__div__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__truediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__radd__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rsub__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rmul__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rfloordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rmod__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rpow__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rlshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rrshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rand__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__ror__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rxor__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rdiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__rtruediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: int \n\

__builtin__.int.__pos__ = \
  :rtype: int \n\

__builtin__.int.__neg__ = \
  :rtype: int \n\

__builtin__.int.__invert__ = \
  :rtype: int \n\

__builtin__.long.__init__ = \
  :type x: object \n\
  :type base: bool or int or long or float or complex or None \n\
  :rtype: long \n\

__builtin__.long.__add__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__sub__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__mul__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__floordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__mod__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__pow__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__lshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__and__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__or__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__xor__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__div__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__truediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__radd__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rsub__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rmul__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rfloordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rmod__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rpow__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rlshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rrshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rand__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__ror__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rxor__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rdiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__rtruediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: long \n\

__builtin__.long.__pos__ = \
  :rtype: long \n\

__builtin__.long.__neg__ = \
  :rtype: long \n\

__builtin__.long.__invert__ = \
  :rtype: long \n\

__builtin__.float.__init__ = \
  :type x: object \n\
  :rtype: float \n\

__builtin__.float.__add__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__sub__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__mul__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__floordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__mod__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__pow__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__lshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__and__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__or__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__xor__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__div__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__truediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__radd__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rsub__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rmul__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rfloordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rmod__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rpow__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rlshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rrshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rand__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__ror__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rxor__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rdiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__rtruediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: float \n\

__builtin__.float.__pos__ = \
  :rtype: float \n\

__builtin__.float.__neg__ = \
  :rtype: float \n\

__builtin__.complex.__init__ = \
  :type real: object \n\
  :type imag: object or None \n\
  :rtype: complex \n\

__builtin__.complex.__add__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__sub__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__mul__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__floordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__mod__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__pow__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__lshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__and__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__or__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__xor__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__div__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__truediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__radd__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rsub__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rmul__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rfloordiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rmod__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rpow__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rlshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rrshift__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rand__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__ror__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rxor__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rdiv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__rtruediv__ = \
  :type y: int or long or float or complex \n\
  :rtype: complex \n\

__builtin__.complex.__pos__ = \
  :rtype: complex \n\

__builtin__.complex.__neg__ = \
  :rtype: complex \n\


## 5.6. Sequence types

__builtin__.str.__init__ = \
  :rtype: bytes \n\

__builtin__.str.__add__ = \
  :type y: string \n\
  :rtype: bytes \n\

__builtin__.str.__mul__ = \
  :type n: int or long \n\
  :rtype: bytes \n\

__builtin__.str.__mod__ = \
  :type y: object \n\
  :rtype: bytes \n\

__builtin__.str.__rmul__ = \
  :type n: int or long \n\
  :rtype: bytes \n\

__builtin__.str.__rmod__ = \
  :type y: object \n\
  :rtype: bytes \n\

__builtin__.str.__getitem__ = \
  :type y: int \n\
  :rtype: bytes \n\

__builtin__.str.capitalize = \
  :rtype: bytes \n\

__builtin__.str.center = \
  :type width: int or long \n\
  :type fillchar: bytes or None \n\
  :rtype: bytes \n\

__builtin__.str.count = \
  :type sub: bytes \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.decode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: unicode \n\

__builtin__.str.encode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: bytes \n\

__builtin__.str.endswith = \
  :type suffix: string or tuple \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.str.find = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.format = \
  :rtype: bytes \n\

__builtin__.str.index = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.isalnum = \
  :rtype: bool \n\

__builtin__.str.isalpha = \
  :rtype: bool \n\

__builtin__.str.isdigit = \
  :rtype: bool \n\

__builtin__.str.islower = \
  :rtype: bool \n\

__builtin__.str.isspace = \
  :rtype: bool \n\

__builtin__.str.istitle = \
  :rtype: bool \n\

__builtin__.str.isupper = \
  :rtype: bool \n\

__builtin__.str.join = \
  :type iterable: collections.Iterable of string \n\
  :rtype: bytes \n\

__builtin__.str.ljust = \
  :type width: int or long \n\
  :type fillchar: bytes or None \n\
  :rtype: bytes \n\

__builtin__.str.lower = \
  :rtype: bytes \n\

__builtin__.str.lstrip = \
  :type chars: string or None \n\
  :rtype: bytes \n\

__builtin__.str.next = \
  :rtype: bytes \n\

__builtin__.str.partition = \
  :type sep: string \n\
  :rtype: (bytes, bytes, bytes) \n\

__builtin__.str.replace = \
  :type old: string \n\
  :type new: string \n\
  :type count: int or long \n\
  :rtype: bytes \n\

__builtin__.str.rfind = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.rindex = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.str.rpartition = \
  :type sep: string \n\
  :rtype: (bytes, bytes, bytes) \n\

__builtin__.str.rsplit = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of bytes \n\

__builtin__.str.rstrip = \
  :type chars: string or None \n\
  :rtype: bytes \n\

__builtin__.str.split = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of bytes \n\

__builtin__.str.splitlines = \
  :type keepends: bool or int or long or None \n\
  :rtype: list of bytes \n\

__builtin__.str.startswith = \
  :type prefix: string or tuple \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.str.strip = \
  :type chars: string or None \n\
  :rtype: bytes \n\

__builtin__.str.swapcase = \
  :rtype: bytes \n\

__builtin__.str.title = \
  :rtype: bytes \n\

__builtin__.str.translate = \
  :type table: object \n\
  :type deletechars: bytes \n\
  :rtype: bytes \n\

__builtin__.str.upper = \
  :rtype: bytes \n\

__builtin__.str.zfill = \
  :type width: int or long \n\
  :rtype: bytes \n\

__builtin__.unicode.__init__ = \
  :rtype: unicode \n\

__builtin__.unicode.__add__ = \
  :type y: string \n\
  :rtype: unicode \n\

__builtin__.unicode.__mul__ = \
  :type n: int or long \n\
  :rtype: unicode \n\

__builtin__.unicode.__mod__ = \
  :type y: object \n\
  :rtype: unicode \n\

__builtin__.unicode.__rmul__ = \
  :type n: int or long \n\
  :rtype: unicode \n\

__builtin__.unicode.__rmod__ = \
  :type y: object \n\
  :rtype: unicode \n\

__builtin__.unicode.__getitem__ = \
  :type y: int \n\
  :rtype: unicode \n\

__builtin__.unicode.format = \
  :rtype: unicode \n\

__builtin__.unicode.capitalize = \
  :rtype: unicode \n\

__builtin__.unicode.center = \
  :type width: int or long \n\
  :type fillchar: unicode or None \n\
  :rtype: unicode \n\

__builtin__.unicode.count = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.decode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.encode = \
  :type encoding: string \n\
  :type errors: string or None \n\
  :rtype: bytes \n\

__builtin__.unicode.endswith = \
  :type suffix: string or tuple \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.unicode.find = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.index = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.isalnum = \
  :rtype: bool \n\

__builtin__.unicode.isalpha = \
  :rtype: bool \n\

__builtin__.unicode.isdecimal = \
  :rtype: bool \n\

__builtin__.unicode.isdigit = \
  :rtype: bool \n\

__builtin__.unicode.islower = \
  :rtype: bool \n\

__builtin__.unicode.isnumeric = \
  :rtype: bool \n\

__builtin__.unicode.isspace = \
  :rtype: bool \n\

__builtin__.unicode.istitle = \
  :rtype: bool \n\

__builtin__.unicode.isupper = \
  :rtype: bool \n\

__builtin__.unicode.join = \
  :type iterable: collections.Iterable of string \n\
  :rtype: unicode \n\

__builtin__.unicode.ljust = \
  :type width: int or long \n\
  :type fillchar: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.lower = \
  :rtype: unicode \n\

__builtin__.unicode.lstrip = \
  :type chars: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.next = \
  :rtype: unicode \n\

__builtin__.unicode.partition = \
  :type sep: string \n\
  :rtype: (unicode, unicode, unicode) \n\

__builtin__.unicode.replace = \
  :type old: string \n\
  :type new: string \n\
  :type count: int or long \n\
  :rtype: unicode \n\

__builtin__.unicode.rfind = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.rindex = \
  :type sub: string \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: int \n\

__builtin__.unicode.rpartition = \
  :type sep: string \n\
  :rtype: (unicode, unicode, unicode) \n\

__builtin__.unicode.rsplit = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of unicode \n\

__builtin__.unicode.rstrip = \
  :type chars: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.split = \
  :type sep: string or None \n\
  :type maxsplit: int or long or None \n\
  :rtype: list of unicode \n\

__builtin__.unicode.splitlines = \
  :type keepends: bool or int or long or None \n\
  :rtype: list of unicode \n\

__builtin__.unicode.startswith = \
  :type prefix: string or tuple \n\
  :type start: int or long or None \n\
  :type end: int or long or None \n\
  :rtype: bool \n\

__builtin__.unicode.strip = \
  :type chars: string or None \n\
  :rtype: unicode \n\

__builtin__.unicode.swapcase = \
  :rtype: unicode \n\

__builtin__.unicode.title = \
  :rtype: unicode \n\

__builtin__.unicode.translate = \
  :type table: object \n\
  :type deletechars: string \n\
  :rtype: unicode \n\

__builtin__.unicode.upper = \
  :rtype: unicode \n\

__builtin__.unicode.zfill = \
  :type width: int or long \n\
  :rtype: unicode \n\

__builtin__.list.__init__ = \
  :type seq: collections.Iterable of T \n\
  :rtype: list of T \n\

__builtin__.list.__add__ = \
  :type y: list of T \n\
  :rtype: list of T \n\

__builtin__.list.__mul__ = \
  :type n: int or long \n\
  :rtype: list of T \n\

__builtin__.list.__rmul__ = \
  :type n: int or long \n\
  :rtype: list of T \n\

__builtin__.list.__getitem__ = \
  :type y: int \n\
  :rtype: T \n\

__builtin__.list.__setitem__ = \
  :type i: int \n\
  :type y: T \n\
  :rtype: None \n\

__builtin__.list.__delitem__ = \
  :type y: int \n\
  :rtype: None \n\

__builtin__.list.append = \
  :type p_object: T \n\
  :rtype: None \n\

__builtin__.list.extend = \
  :type iterable: collections.Iterable of T \n\
  :rtype: None \n\

__builtin__.list.count = \
  :type value: T \n\
  :rtype: int \n\

__builtin__.list.index = \
  :type value: T \n\
  :type start: bool or int or long or None \n\
  :type stop: bool or int or long or None \n\
  :rtype: int \n\

__builtin__.list.insert = \
  :type index: bool or int or long \n\
  :type p_object: T \n\

__builtin__.list.pop = \
  :type index: bool or int or long \n\
  :rtype: T \n\

__builtin__.list.remove = \
  :type value: T \n\

__builtin__.list.sort = \
  :type reverse: bool \n\

__builtin__.tuple.index = \
  :type value: object \n\
  :type start: bool or int or long or None \n\
  :type stop: bool or int or long or None \n\
  :rtype: int \n\

__builtin__.tuple.count = \
  :type value: object \n\
  :rtype: int \n\

__builtin__.tuple.__add__ = \
  :type y: tuple \n\
  :rtype: tuple \n\

__builtin__.tuple.__mul__ = \
  :type n: int or long \n\
  :rtype: tuple \n\

__builtin__.tuple.__rmul__ = \
  :type n: int or long \n\
  :rtype: tuple \n\

__builtin__.tuple.__getitem__ = \
  :type y: int \n\
  :rtype: object or unknown \n\


## 5.8 Mapping types

__builtin__.dict.__init__ = \
  :type seq: collections.Iterable of (T, V) \n\
  :rtype: dict of (T, V) \n\

__builtin__.dict.__getitem__ = \
  :type y: T \n\
  :rtype: V \n\

__builtin__.dict.__setitem__ = \
  :type i: T \n\
  :type y: V \n\
  :rtype: None \n\

__builtin__.dict.__delitem__ = \
  :type y: T \n\
  :rtype: None \n\

__builtin__.dict.copy = \
  :rtype: dict of (T, V) \n\

__builtin__.dict.fromkeys = \
  :type S: collections.Iterable of T \n\
  :type v: V or None \n\
  :rtype: dict of (T, V) \n\

__builtin__.dict.has_key = \
  :type k: T \n\
  :rtype: bool \n\

__builtin__.dict.items = \
  :rtype: list of (T, V) \n\

__builtin__.dict.iteritems = \
  :rtype: collections.Iterable of (T, V) \n\

__builtin__.dict.iterkeys = \
  :rtype: collections.Iterable of T \n\

__builtin__.dict.itervalues = \
  :rtype: collections.Iterable of V \n\

__builtin__.dict.keys = \
  :rtype: list of T \n\

__builtin__.dict.values = \
  :rtype: list of V \n\


## 5.9. File objects

__builtin__.file.fileno = \
  :rtype: int \n\

__builtin__.file.isatty = \
  :rtype: bool \n\

__builtin__.file.next = \
  :rtype: string or unknown \n\

__builtin__.file.read = \
  :type size: int or long or None \n\
  :rtype: string or unknown \n\

__builtin__.file.readline = \
  :type size: int or long or None \n\
  :rtype: string or unknown \n\

__builtin__.file.readlines = \
  :type size: int or long or None \n\
  :rtype: list of string or unknown \n\

__builtin__.file.xreadlines = \
  :rtype: collections.Iterable of string or unknown \n\

__builtin__.file.seek = \
  :type offset: int or long \n\
  :type whence: int \n\

__builtin__.file.tell = \
  :rtype: int \n\

__builtin__.file.truncate = \
  :type size: int or long \n\

__builtin__.file.write = \
  :type p_str: string \n\
  :rtype: None \n\

__builtin__.file.writelines = \
  :type sequence_of_strings: collections.Iterable of string \n\

## 7.3. struct

struct.pack = \
  :type fmt: bytes or unicode \n\
  :rtype: bytes \n\

struct.pack_into = \
  :type fmt: bytes or unicode \n\
  :type buffer: object \n\
  :type offset: int or long \n\
  :rtype: bytes \n\

struct.unpack = \
  :type fmt: bytes or unicode \n\
  :type string: string \n\
  :rtype: tuple \n\

struct.unpack_from = \
  :type fmt: bytes or unicode \n\
  :type buffer: object \n\
  :type offset: int or long \n\
  :rtype: tuple \n\

struct.calcsize = \
  :type fmt: string \n\
  :rtype: int \n\

struct.Struct.__init__ = \
  :type fmt: string \n\

struct.Struct.pack = \
  :rtype: bytes \n\

struct.Struct.pack_into = \
  :type buffer: object \n\
  :type offset: int or long \n\
  :rtype: bytes \n\

struct.Struct.unpack = \
  :type string: string \n\
  :rtype: tuple \n\

struct.Struct.unpack_from = \
  :type buffer: object \n\
  :type offset: int or long \n\
  :rtype: tuple \n\


## 7.5. StringIO

# TODO: StringIO constructor should have type: T (bytes or unicode) -> StringIO of T

StringIO.StringIO.__init__ = \
  :type buf: T \n\
  :rtype: StringIO.StringIO of T \n\

StringIO.StringIO.__init__.1 = \
  :type buf: bytes \n\
  :rtype: StringIO.StringIO of bytes \n\

StringIO.StringIO.__init__.2 = \
  :type buf: unicode \n\
  :rtype: StringIO.StringIO of unicode \n\

StringIO.StringIO.getvalue = \
  :rtype: T \n\

StringIO.StringIO.isatty = \
  :rtype: bool \n\

StringIO.StringIO.next = \
  :rtype: T \n\

StringIO.StringIO.read = \
  :type n: int or long or None \n\
  :rtype: T \n\

StringIO.StringIO.readline = \
  :type length: int or long or None \n\
  :rtype: T \n\

StringIO.StringIO.readlines = \
  :rtype: list of T \n\

StringIO.StringIO.seek = \
  :type position: int or long \n\

StringIO.StringIO.tell = \
  :rtype: int \n\

StringIO.StringIO.write = \
  :type s: T \n\
  :rtype: None \n\

StringIO.StringIO.writelines = \
  :type s: collections.Iterable of T \n\

StringIO.StringIO.__iter__ = \
  :rtype: StringIO.StringIO of T \n\


## 7.6. cStringIO

cStringIO.StringIO = \
  :type s: string \n\
  :rtype: cStringIO.OutputType of string \n\

cStringIO.StringIO.1 = \
  :type s: bytes \n\
  :rtype: cStringIO.OutputType of bytes \n\

cStringIO.StringIO.2 = \
  :type s: unicode \n\
  :rtype: cStringIO.OutputType of unicode \n\

cStringIO.OutputType.__init__ = \
  :rtype: cStringIO.OutputType of T \n\

cStringIO.OutputType.getvalue = \
  :rtype: T \n\

cStringIO.OutputType.isatty = \
  :rtype: bool \n\

cStringIO.OutputType.next = \
  :rtype: T \n\

cStringIO.OutputType.read = \
  :type s: int or long or None \n\
  :rtype: T \n\

cStringIO.OutputType.readline = \
  :rtype: T \n\

cStringIO.OutputType.readlines = \
  :rtype: list of T \n\

cStringIO.OutputType.seek = \
  :type position: int or long \n\

cStringIO.OutputType.tell = \
  :rtype: int \n\

cStringIO.OutputType.write = \
  :type s: T \n\
  :rtype: None \n\

cStringIO.OutputType.writelines = \
  :type s: collections.Iterable of T \n\

cStringIO.OutputType.__iter__ = \
  :rtype: cStringIO.OutputType of T \n\


## 8.1. datetime

datetime.date.today = \
  :rtype: datetime.date \n\

datetime.date.fromtimestamp = \
  :rtype: datetime.date \n\

datetime.date.fromordinal = \
  :rtype: datetime.date \n\

datetime.date.replace = \
  :rtype: datetime.date \n\

datetime.date.toordinal = \
  :rtype: int \n\

datetime.date.weekday = \
  :rtype: int \n\

datetime.date.isoweekday = \
  :rtype: int \n\

datetime.date.isocalendar = \
  :rtype: (int, int, int) \n\

datetime.date.isoformat = \
  :rtype: bytes \n\

datetime.date.ctime = \
  :rtype: bytes \n\

datetime.date.strftime = \
  :type format: string \n\
  :rtype: string \n\

datetime.date.__add__ = \
  :type y: datetime.timedelta \n\
  :type other: datetime.timedelta \n\
  :rtype: datetime.date \n\

datetime.date.__radd__ = \
  :type y: datetime.timedelta \n\
  :type other: datetime.timedelta \n\
  :rtype: datetime.date \n\

datetime.date.__sub__ = \
  :type y: datetime.date or datetime.timedelta \n\
  :type other: datetime.date or datetime.timedelta \n\
  :rtype: datetime.date or datetime.timedelta or unknown \n\

datetime.date.__sub__.1 = \
  :type y: datetime.date \n\
  :type other: datetime.date \n\
  :rtype: datetime.timedelta \n\

datetime.date.__sub__.2 = \
  :type y: datetime.timedelta \n\
  :type other: datetime.timedelta \n\
  :rtype: datetime.date \n\

datetime.date.__rsub__ = \
  :type y: datetime.date \n\
  :type other: datetime.date \n\
  :rtype: datetime.timedelta \n\

datetime.time.isoformat = \
  :rtype: bytes \n\

datetime.time.strftime = \
  :type format: string \n\
  :rtype: string \n\

datetime.time.utcoffset = \
  :rtype: datetime.timedelta or None \n\

datetime.time.dst = \
  :rtype: datetime.timedelta or None \n\

datetime.ime.tzname = \
  :rtype: string \n\

datetime.timedelta.__add__ = \
  :type y: datetime.timedelta or datetime.date or datetime.datetime \n\
  :type other: datetime.timedelta or datetime.date or datetime.datetime \n\
  :rtype: datetime.timedelta or datetime.date or datetime.datetime or unknown \n\

datetime.timedelta.__add__.1 = \
  :type y: datetime.timedelta \n\
  :type other: datetime.timedelta \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__add__.2 = \
  :type y: datetime.datetime \n\
  :type other: datetime.datetime \n\
  :rtype: datetime.datetime \n\

datetime.timedelta.__add__.3 = \
  :type y: datetime.date \n\
  :type other: datetime.date \n\
  :rtype: datetime.date \n\

datetime.timedelta.__radd__ = \
  :type y: datetime.timedelta or datetime.date or datetime.datetime \n\
  :type other: datetime.timedelta or datetime.date or datetime.datetime \n\
  :rtype: datetime.timedelta or datetime.date or datetime.datetime or unknown \n\

datetime.timedelta.__sub__ = \
  :type y: datetime.timedelta or datetime.date or datetime.datetime \n\
  :type other: datetime.timedelta or datetime.date or datetime.datetime \n\
  :rtype: datetime.timedelta or datetime.date or datetime.datetime or unknown \n\

datetime.timedelta.__rsub__ = \
  :type y: datetime.timedelta or datetime.date or datetime.datetime \n\
  :type other: datetime.timedelta or datetime.date or datetime.datetime \n\
  :rtype: datetime.timedelta or datetime.date or datetime.datetime or unknown \n\

datetime.timedelta.__mul__ = \
  :type y: int or long \n\
  :type other: int or long \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__rmul__ = \
  :type y: int or long \n\
  :type other: int or long \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__div__ = \
  :type y: int or long \n\
  :type other: int or long \n\
  :rtype: datetime.timedelta \n\

datetime.timedelta.__truediv__ = \
  :type y: int or long \n\
  :type other: int or long \n\
  :rtype: datetime.timedelta \n\

datetime.datetime.today = \
  :rtype: datetime.datetime \n\

datetime.datetime.now = \
  :type tz: datetime.tzinfo or None \n\
  :rtype: datetime.datetime \n\

datetime.datetime.utcnow = \
  :rtype: datetime.datetime \n\

datetime.datetime.fromtimestamp = \
  :type timestamp: int or long or float \n\
  :type tz: datetime.tzinfo or None \n\
  :rtype: datetime.datetime \n\

datetime.datetime.utcfromtimestamp = \
  :type timestamp: int or long or float \n\
  :rtype: datetime.datetime \n\

datetime.datetime.fromordinal = \
  :type ordinal: int \n\
  :rtype: datetime.datetime \n\

datetime.datetime.combine = \
  :type date: datetime.date \n\
  :type time: datetime.time \n\
  :rtype: datetime.datetime \n\

datetime.datetime.strptime = \
  :type date_string: string \n\
  :type format: string \n\
  :rtype: datetime.datetime \n\

datetime.datetime.date = \
  :rtype: datetime.date \n\

datetime.datetime.time = \
  :rtype: datetime.time \n\

datetime.datetime.timetz = \
  :rtype: datetime.time \n\

datetime.datetime.replace = \
  :rtype: datetime.datetime \n\

datetime.datetime.astimezone = \
  :type tz: datetime.tzinfo \n\
  :rtype: datetime.datetime \n\

datetime.datetime.utcoffset = \
  :rtype: datetime.timedelta or None \n\

datetime.datetime.dst = \
  :rtype: datetime.timedelta or None \n\

datetime.datetime.tzname = \
  :rtype: string \n\

datetime.datetime.toordinal = \
  :rtype: int \n\

datetime.datetime.weekday = \
  :rtype: int \n\

datetime.datetime.isoweekday = \
  :rtype: int \n\

datetime.datetime.isocalendar = \
  :rtype: (int, int, int) \n\

datetime.datetime.isoformat = \
  :rtype: bytes \n\

datetime.datetime.ctime = \
  :rtype: bytes \n\

datetime.datetime.strftime = \
  :type format: string \n\
  :rtype: string \n\

datetime.datetime.__add__ = \
  :type y: datetime.timedelta \n\
  :type other: datetime.timedelta \n\
  :rtype: datetime.datetime \n\

datetime.datetime.__radd__ = \
  :type y: datetime.timedelta \n\
  :type other: datetime.timedelta \n\
  :rtype: datetime.datetime \n\

datetime.datetime.__sub__ = \
  :type y: datetime.datetime or datetime.timedelta \n\
  :type other: datetime.datetime or datetime.timedelta \n\
  :rtype: datetime.datetime or datetime.timedelta or unknown \n\

datetime.datetime.__sub__.1 = \
  :type y: datetime.datetime \n\
  :type other: datetime.datetime \n\
  :rtype: datetime.timedelta \n\

datetime.datetime.__sub__.2 = \
  :type y: datetime.timedelta \n\
  :type other: datetime.timedelta \n\
  :rtype: datetime.datetime \n\

datetime.datetime.__rsub__ = \
  :type y: datetime.datetime \n\
  :type other: datetime.datetime \n\
  :rtype: datetime.timedelta \n\


## 8.3. collections

collections.Iterator.__init__ = \
  :rtype: collections.Iterator of T \n\

collections.Iterator.next = \
  :rtype: T \n\


## 9.2 math

math.acos = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.acosh = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.asin = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.asinh = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.atan = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.atan2 = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.atanh = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.ceil = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.copysign = \
  :type x: float or numbers.Real \n\
  :type y: float or numbers.Real \n\
  :rtype: float \n\

math.cos = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.cosh = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.degrees = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.erf = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.erfc = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.exp = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.expm1 = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.fabs = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.factorial = \
  :type x: int or long \n\
  :rtype: int \n\

math.floor = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.fmod = \
  :type x: float or numbers.Real \n\
  :type y: float or numbers.Real \n\
  :rtype: float \n\

math.frexp = \
  :type x: float or numbers.Real \n\
  :rtype: (float, int) \n\

math.fsum = \
  :type iterable: collections.Iterable of float \n\
  :rtype: float \n\

math.gamma = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.hypot = \
  :type x: float or numbers.Real \n\
  :type y: float or numbers.Real \n\
  :rtype: float \n\

math.isinf = \
  :type x: float or numbers.Real \n\
  :rtype: bool \n\

math.isnan = \
  :type x: float or numbers.Real \n\
  :rtype: bool \n\

math.ldexp = \
  :type x: float or numbers.Real \n\
  :type y: float or numbers.Real \n\
  :rtype: float \n\

math.lgamma = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.log = \
  :type x: float or numbers.Real \n\
  :type base: float or numbers.Real \n\
  :rtype: float \n\

math.log10 = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.log1p = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.modf = \
  :type x: float or numbers.Real \n\
  :rtype: (float, float) \n\

math.pow = \
  :type x: float or numbers.Real \n\
  :type y: float or numbers.Real \n\
  :rtype: float \n\

math.radians = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.sin = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.sinh = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.sqrt = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.tan = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.tanh = \
  :type x: float or numbers.Real \n\
  :rtype: float \n\

math.trunc = \
  :type x: float or numbers.Real \n\
  :rtype: int \n\


## 9.4. decimal

decimal.Decimal.as_tuple = \
  :rtype: decimal.DecimalTuple \n\

decimal.Decimal.__new__ = \
  :rtype: decimal.Decimal \n\

decimal.Decimal.__add__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__sub__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__mul__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__floordiv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__mod__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__pow__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__div__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__truediv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__radd__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rsub__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rmul__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rfloordiv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rmod__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rpow__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rdiv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__rtruediv__ = \
  :type other: decimal.Decimal or int or long or float or complex \n\
  :rtype: decimal.Decimal \n\

decimal.Decimal.__pos__ = \
  :rtype: decimal.Decimal \n\

decimal.Decimal.__neg__ = \
  :rtype: decimal.Decimal \n\


# 10.1. os.path

os.path.abspath = \
  :type path: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.abspath.1 = \
  :type path: bytes \n\
  :rtype: bytes \n\

os.path.abspath.2 = \
  :type path: unicode \n\
  :rtype: unicode \n\

os.path.basename = \
  :type p: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.basename.1 = \
  :type p: bytes \n\
  :rtype: bytes \n\

os.path.basename.2 = \
  :type p: unicode \n\
  :rtype: unicode \n\

os.path.commonprefix = \
  :type m: collections.Iterable of string \n\
  :rtype: bytes or unicode or unknown \n\

os.path.commonprefix.1 = \
  :type m: collections.Iterable of bytes \n\
  :rtype: bytes \n\

os.path.commonprefix.2 = \
  :type m: collections.Iterable of unicode \n\
  :rtype: unicode \n\

os.path.dirname = \
  :type p: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.dirname.1 = \
  :type p: bytes \n\
  :rtype: bytes \n\

os.path.dirname.2 = \
  :type p: unicode \n\
  :rtype: unicode \n\

os.path.exists = \
  :type path: bytes or unicode \n\
  :rtype: bool \n\

os.path.lexists = \
  :type path: bytes or unicode \n\
  :rtype: bool \n\

os.path.expanduser = \
  :type path: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.expanduser.1 = \
  :type path: bytes \n\
  :rtype: bytes \n\

os.path.expanduser.2 = \
  :type path: unicode \n\
  :rtype: unicode \n\

os.path.expandvars = \
  :type path: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.expandvars.1 = \
  :type path: bytes \n\
  :rtype: bytes \n\

os.path.expandvars.2 = \
  :type path: unicode \n\
  :rtype: unicode \n\

os.path.getatime = \
  :type filename: bytes or unicode \n\
  :rtype: int or float or unknown \n\

os.path.getmtime = \
  :type filename: bytes or unicode \n\
  :rtype: int or float or unknown \n\

os.path.getctime = \
  :type filename: bytes or unicode \n\
  :rtype: int or float or unknown \n\

os.path.getsize = \
  :type filename: bytes or unicode \n\
  :rtype: int or long or unknown \n\

os.path.isabs = \
  :type s: bytes or unicode \n\
  :rtype: bool \n\

os.path.isfile = \
  :type path: bytes or unicode \n\
  :rtype: bool \n\

os.path.isdir = \
  :type s: bytes or unicode \n\
  :rtype: bool \n\

os.path.islink = \
  :type path: bytes or unicode \n\
  :rtype: bool \n\

os.path.ismount = \
  :type path: bytes or unicode \n\
  :rtype: bool \n\

os.path.join = \
  :type a: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.join.1 = \
  :type a: bytes \n\
  :rtype: bytes \n\

os.path.join.2 = \
  :type a: unicode \n\
  :rtype: unicode \n\

os.path.normcase = \
  :type s: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.normcase.1 = \
  :type s: bytes \n\
  :rtype: bytes \n\

os.path.normcase.2 = \
  :type s: unicode \n\
  :rtype: unicode \n\

os.path.normpath = \
  :type path: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.normpath.1 = \
  :type path: bytes \n\
  :rtype: bytes \n\

os.path.normpath.2 = \
  :type path: unicode \n\
  :rtype: unicode \n\

os.path.realpath = \
  :type filename: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.realpath.1 = \
  :type filename: bytes \n\
  :rtype: bytes \n\

os.path.realpath.2 = \
  :type filename: unicode \n\
  :rtype: unicode \n\

os.path.relpath = \
  :type path: bytes or unicode \n\
  :type start: bytes or unicode \n\
  :rtype: bytes or unicode or unknown \n\

os.path.relpath.1 = \
  :type path: bytes \n\
  :rtype: bytes \n\

os.path.relpath.2 = \
  :type path: unicode \n\
  :rtype: unicode \n\

os.path.samefile = \
  :type f1: bytes or unicode \n\
  :type f2: bytes or unicode \n\
  :rtype: bool \n\

os.path.sameopenfile = \
  :type fp1: int \n\
  :type fp2: int \n\
  :rtype: bool \n\

os.path.samestat = \
  :type s1: os.stat_result or tuple \n\
  :type s2: os.stat_result or tuple \n\
  :rtype: bool \n\

os.path.split = \
  :type p: bytes or unicode \n\
  :rtype: (bytes or unicode or unknown, bytes or unicode or unknown) \n\

os.path.split.1 = \
  :type p: bytes \n\
  :rtype: (bytes, bytes) \n\

os.path.split.2 = \
  :type p: unicode \n\
  :rtype: (unicode, unicode) \n\

os.path.splitdrive = \
  :type p: bytes or unicode \n\
  :rtype: (bytes or unicode or unknown, bytes or unicode or unknown) \n\

os.path.splitdrive.1 = \
  :type p: bytes \n\
  :rtype: (bytes, bytes) \n\

os.path.splitdrive.2 = \
  :type p: unicode \n\
  :rtype: (unicode, unicode) \n\

os.path.splitext = \
  :type p: bytes or unicode \n\
  :rtype: (bytes or unicode or unknown, bytes or unicode or unknown) \n\

os.path.splitext.1 = \
  :type p: bytes \n\
  :rtype: (bytes, bytes) \n\

os.path.splitext.2 = \
  :type p: unicode \n\
  :rtype: (unicode, unicode) \n\

os.path.splitunc = \
  :type p: bytes or unicode \n\
  :rtype: (bytes or unicode or unknown, bytes or unicode or unknown) \n\

os.path.splitunc.1 = \
  :type p: bytes \n\
  :rtype: (bytes, bytes) \n\

os.path.splitunc.2 = \
  :type p: unicode \n\
  :rtype: (unicode, unicode) \n\

os.path.walk = \
  :type top: bytes or unicode \n\
  :rtype: None \n\


## 10.10. shutil

shutil.copyfile = \
  :type src: bytes or unicode \n\
  :type dst: bytes or unicode \n\
  :rtype None \n\

shutil.copymode = \
  :type src: bytes or unicode \n\
  :type dst: bytes or unicode \n\
  :rtype None \n\

shutil.copystat = \
  :type src: bytes or unicode \n\
  :type dst: bytes or unicode \n\
  :rtype None \n\

shutil.copy = \
  :type src: bytes or unicode \n\
  :type dst: bytes or unicode \n\
  :rtype None \n\

shutil.copy2 = \
  :type src: bytes or unicode \n\
  :type dst: bytes or unicode \n\
  :rtype None \n\

shutil.copytree = \
  :type src: bytes or unicode \n\
  :type dst: bytes or unicode \n\
  :type symlinks: bool \n\
  :type ignore: collections.Callable or None \n\
  :rtype None \n\

shutil.rmtree = \
  :type path: bytes or unicode \n\
  :type ignore_errors: bool\n\
  :type onerror: collections.Callable or None \n\
  :rtype None \n\

shutil.move = \
  :type src: bytes or unicode \n\
  :type dst: bytes or unicode \n\
  :rtype None \n\

shutil.make_archive = \
  :type base_name: bytes or unicode \n\
  :type format: bytes or unicode \n\
  :type root_dir: bytes or unicode or None \n\
  :type base_dir: bytes or unicode or None \n\
  :type verbose: bool or int \n\
  :type dry_run: bool or int \n\
  :type owner: bytes or unicode or int or None \n\
  :type group: bytes or unicode or int or None \n\
  :rtype: bytes or unicode or unknown \n\

shutil.get_archive_formats = \
  :rtype: list of (string, string) \n\

shutil.register_archive_format = \
  :type name: bytes or unicode \n\
  :type function: collections.Callable \n\
  :type extra_args: None or collections.Sequence of (string, object) \n\
  :type description: bytes or unicode \n\
  :rtype: None

shutil.unregister_archive_format = \
  :type name: bytes or unicode \n\
  :rtype: None \n\


## 11.13 sqlite3

_sqlite3.connect = \
  :type database: bytes or unicode \n\
  :rtype: _sqlite3.Connection

_sqlite3.Connection.cursor = \
  :rtype: _sqlite3.Cursor

## 15.1. os

os.ctermid = \
  :rtype: unicode \n\

os.getegid = \
  :rtype: int \n\

os.geteuid = \
  :rtype: int \n\

os.getgid = \
  :rtype: int \n\

os.getgroups = \
  :rtype: list of int \n\

os.initgroups = \
  :type username: string \n\
  :type gid: int \n\
  :rtype: None \n\

os.getlogin = \
  :rtype: unicode \n\

os.getpgid = \
  :type pid: int \n\
  :rtype: int \n\

os.getpgrp = \
  :rtype: int \n\

os.getpid = \
  :rtype: int \n\

os.getresuid = \
  :rtype: (int, int, int) \n\

os.getuid = \
  :rtype: int \n\

os.getenv = \
  :type key: string \n\
  :type default: object \n\
  :rtype: string \n\

os.putenv = \
  :type key: bytes or unicode \n\
  :type value: bytes or unicode \n\
  :rtype: None \n\

os.setegid = \
  :type gid: int \n\
  :rtype: None \n\

os.seteuid = \
  :type uid: int \n\
  :rtype: None \n\

os.setgid = \
  :type gid: int \n\
  :rtype: None \n\

os.setgroups = \
  :type p_list: list of int \n\
  :rtype: None \n\

os.setpgrp = \
  :rtype: None \n\

os.setpgid = \
  :type pid: int \n\
  :type pgrp: int \n\
  :rtype: None \n\

os.setregid = \
  :type rgid: int \n\
  :type egid: int \n\
  :rtype: None \n\

os.setresgid = \
  :type rgid: int \n\
  :type egid: int \n\
  :type sgid: int \n\
  :rtype: None \n\

os.setresuid = \
  :type ruid: int \n\
  :type euid: int \n\
  :type suid: int \n\
  :rtype: None \n\

os.setreuid = \
  :type ruid: int \n\
  :type euid: int \n\
  :rtype: None \n\

os.getsid = \
  :type pid: int \n\
  :rtype: int \n\

os.setsid = \
  :rtype: None \n\

os.setuid = \
  :type uid: int \n\
  :rtype: None \n\

os.strerror = \
  :type code: int \n\
  :rtype: unicode \n\

os.umask = \
  :type new_mask: int \n\
  :rtype: int \n\

os.uname = \
  :rtype: (unicode, unicode, unicode, unicode, unicode) \n\

os.unsetenv = \
  :type key: string \n\
  :rtype: None \n\

os.fdopen = \
  :type fd: int \n\
  :type mode: string \n\
  :type bufsize: int \n\
  :rtype: file \n\

os.fdopen.1 = \
  :type mode: unicode \n\
  :rtype: io.TextIOWrapper of unicode \n\

os.fdopen.2 = \
  :type mode: bytes \n\
  :rtype: io.FileIO of bytes \n\

os.popen = \
  :type command: string \n\
  :type mode: string \n\
  :type bufsize: int \n\
  :rtype: io.FileIO \n\

os.tmpfile = \
  :rtype: io.FileIO \n\

os.popen2 = \
  :type cmd: string \n\
  :type mode: string \n\
  :type bufsize: int \n\
  :rtype: (io.FileIO, io.FileIO) \n\

os.popen3 = \
  :type cmd: string \n\
  :type mode: string \n\
  :type bufsize: int \n\
  :rtype: (io.FileIO, io.FileIO, io.FileIO) \n\

os.popen4 = \
  :type cmd: string \n\
  :type mode: string \n\
  :type bufsize: int \n\
  :rtype: (io.FileIO, io.FileIO) \n\

os.close = \
  :type fd: int \n\
  :rtype: None \n\

os.closerange = \
  :type fd_low: int \n\
  :type fd_high: int \n\
  :rtype: None \n\

os.dup = \
  :type fd: int \n\
  :rtype: int \n\

os.dup2 = \
  :type old_fd: int \n\
  :type new_fd: int \n\
  :rtype: None \n\

os.fchmod = \
  :type fd: int \n\
  :type mode: int \n\
  :rtype: None \n\

os.fchown = \
  :type fd: int \n\
  :type uid: int \n\
  :type gid: int \n\
  :rtype: None \n\

os.fdatasync = \
  :type fildes: int \n\
  :rtype: None \n\

os.fpathconf = \
  :type fd: int \n\
  :type name: int or string \n\

os.fstat = \
  :type fd: int \n\
  :rtype: os.stat_result \n\

os.fstatvfs = \
  :type fd: int \n\
  :rtype: os.statvfs_result \n\

os.fsync = \
  :type filedes: int \n\
  :rtype: None \n\

os.ftruncate = \
  :type fd: int \n\
  :type length: int or long \n\
  :rtype: None \n\

os.isatty = \
  :type fd: int \n\
  :rtype: bool \n\

os.lseek = \
  :type fd: int \n\
  :type pos: int or long \n\
  :type how: int \n\
  :rtype: None \n\

os.open = \
  :type filename: string \n\
  :type mode: string \n\
  :type bufsize: int \n\
  :rtype: int \n\

os.openpty = \
  :rtype: (int, int) \n\

os.pipe = \
  :rtype: (int, int) \n\

os.read = \
  :type fd: int \b\
  :type buffersize: int or long \n\
  :rtype: bytes \n\

os.tcgetpgrp = \
  :type fd: int \n\
  :rtype: int \n\

os.tcsetpgrp = \
  :type fd: int \n\
  :type pgid: int \n\
  :rtype: None \n\

os.ttyname = \
  :type fd: int \n\
  :rtype: unicode \n\

os.write = \
  :type fd: int \n\
  :type string: bytes \n\
  :rtype: int \n\

os.access = \
  :type path: bytes or unicode \n\
  :type mode: int \n\
  :rtype: bool \n\

os.chdir = \
  :type path: bytes or unicode \n\
  :rtype: None \n\

os.fchdir = \
  :type filedes: int \n\
  :rtype: None \n\

os.getcwd = \
  :rtype: bytes \n\

os.getcwdu = \
  :rtype: unicode \n\

os.chroot = \
  :type path: bytes or unicode \n\
  :rtype: None \n\

os.chmod = \
  :type path: bytes or unicode \n\
  :type mode: int \n\
  :rtype: None \n\

os.chown = \
  :type path: bytes or unicode \n\
  :type uid: int \n\
  :type gid: int \n\
  :rtype: None \n\

os.lchown = \
  :type path: bytes or unicode \n\
  :type uid: int \n\
  :type gid: int \n\
  :rtype: None \n\

os.link = \
  :type src: bytes or unicode \n\
  :type dst: bytes or unicode \n\
  :rtype: None \n\

os.listdir = \
  :type path: bytes or unicode \n\
  :rtype: list of string \n\

os.listdir.1 = \
  :type path: unicode \n\
  :rtype: list of unicode \n\

os.lstat = \
  :type path: bytes or unicode \n\
  :rtype: os.stat_result \n\

os.mkfifo = \
  :type filename: bytes or unicode \n\
  :type mode: int \n\
  :rtype: None \n\

os.mknod = \
  :type filename: bytes or unicode \n\
  :type mode: int \n\
  :type device: int \n\
  :rtype: None \n\

os.major = \
  :type device: int \n\
  :rtype: int \n\

os.minor = \
  :type device: int \n\
  :rtype: int \n\

os.makedev = \
  :type major: int \n\
  :type minor: int \n\
  :rtype: int \n\

os.mkdir = \
  :type path: bytes or unicode \n\
  :type mode: int \n\
  :rtype: None \n\

os.makedirs = \
  :type name: bytes or unicode \n\
  :type mode: int \n\
  :rtype: None \n\

os.pathconf = \
  :type path: bytes or unicode \n\
  :type name: int or string \n\

os.readlink = \
  :type path: bytes or unicode \n\
  :rtype: string \n\

os.readlink.1 = \
  :type path: unicode \n\
  :rtype: unicode \n\

os.remove = \
  :type path: bytes or unicode \n\
  :rtype: None \n\

os.removedirs = \
  :type name: bytes or unicode \n\
  :rtype: None \n\

os.rename = \
  :type old: bytes or unicode \n\
  :type new: bytes or unicode \n\
  :rtype: None \n\

os.renames = \
  :type old: bytes or unicode \n\
  :type new: bytes or unicode \n\
  :rtype: None \n\

os.rmdir = \
  :type path: bytes or unicode \n\
  :rtype: None \n\

os.stat = \
  :type path: bytes or unicode \n\
  :rtype: os.stat_result \n\

os.stat_float_times = \
  :type newval: bool or None \n\
  :rtype: bool \n\

os.statvfs = \
  :type path: bytes or unicode \n\
  :rtype: os.statvfs_result \n\

os.symlink = \
  :type src: bytes or unicode \n\
  :type dst: bytes or unicode \n\
  :rtype: None \n\

os.tempnam = \
  :type dir: bytes or unicode \n\
  :type prefix: bytes or unicode \n\
  :rtype: string \n\

os.tmpnam = \
  :rtype: string \n\

os.unlink = \
  :type path: bytes or unicode \n\
  :rtype: None \n\

os.utime = \
  :type path: bytes or unicode \n\
  :type atime: int or float \n\
  :type mtime: int or float \n\
  :rtype: None \n\

os.walk = \
  :type top: bytes or unicode \n\
  :type topdown: bool \n\
  :type followlinks: bool \n\
  :rtype: collections.Iterable of (string, list of string, list of string) \n\

os.walk.1 = \
  :type top: bytes \n\
  :type topdown: bool \n\
  :type followlinks: bool \n\
  :rtype: collections.Iterable of (bytes, list of bytes, list of bytes) \n\

os.walk.2 = \
  :type top: unicode \n\
  :type topdown: bool \n\
  :type followlinks: bool \n\
  :rtype: collections.Iterable of (unicode, list of unicode, list of unicode) \n\

os.execl = \
  :type file: bytes or unicode \n\
  :rtype: None \n\

os.execle = \
  :type file: bytes or unicode \n\
  :rtype: None \n\

os.execlp = \
  :type file: bytes or unicode \n\
  :rtype: None \n\

os.execlpe = \
  :type file: bytes or unicode \n\
  :rtype: None \n\

os.execv = \
  :type path: bytes or unicode \n\
  :type args: collections.Iterable of string \n\
  :rtype: None \n\

os.execve = \
  :type path: bytes or unicode \n\
  :type args: collections.Iterable of string \n\
  :type env: collections.Mapping of (string, string) \n\
  :rtype: None \n\

os.execvp = \
  :type file: bytes or unicode \n\
  :type args: collections.Iterable of string \n\
  :rtype: None \n\

os.execvpe = \
  :type file: bytes or unicode \n\
  :type args: collections.Iterable of string \n\
  :type env: collections.Mapping of (string, string) \n\
  :rtype: None \n\

os._exit = \
  :type status: int \n\
  :rtype: None \n\

os.fork = \
  :rtype: int \n\

os.forkpty = \
  :rtype: (int, int) \n\

os.kill = \
  :type pid: int \n\
  :type sig: int \n\
  :rtype: None \n\

os.killpg = \
  :type pgid: int \n\
  :type sig: int \n\
  :rtype: None \n\

os.nice = \
  :type inc: int \n\
  :rtype: int \n\

os.spawnl = \
  :type mode: int \n\
  :type file: bytes or unicode \n\
  :rtype: int \n\

os.spawnle = \
  :type mode: int \n\
  :type file: bytes or unicode \n\
  :rtype: int \n\

os.spawnlp = \
  :type mode: int \n\
  :type file: bytes or unicode \n\
  :rtype: int \n\

os.spawnlpe = \
  :type mode: int \n\
  :type file: bytes or unicode \n\
  :rtype: int \n\

os.spawnv = \
  :type mode: int \n\
  :type file: bytes or unicode \n\
  :type args: collections.Iterable of string \n\
  :rtype: int \n\

os.spawnve = \
  :type mode: int \n\
  :type file: bytes or unicode \n\
  :type args: collections.Iterable of string \n\
  :type env: collections.Mapping of (string, string) \n\
  :rtype: int \n\

os.spawnvp = \
  :type mode: int \n\
  :type file: bytes or unicode \n\
  :type args: collections.Iterable of string \n\
  :rtype: int \n\

os.spawnvpe = \
  :type mode: int \n\
  :type file: bytes or unicode \n\
  :type args: collections.Iterable of string \n\
  :type env: collections.Mapping of (string, string) \n\
  :rtype: int \n\

os.system = \
  :type command: bytes or unicode \n\
  :rtype: int \n\

os.times = \
  :rtype: (float, float, float, float, float) \n\

os.wait = \
  :rtype: (int, int) \n\

os.waitpid = \
  :type pid: int \n\
  :type options: int \n\
  :rtype: (int, int) \n\

os.wait3 = \
  :type options: int \n\
  :rtype: (int, int, resource.struct_rusage) \n\

os.wait4 = \
  :type pid: int \n\
  :type options: int \n\
  :rtype: (int, int, resource.struct_rusage) \n\

os.WCOREDUMP = \
  :type status: int \n\
  :rtype: bool \n\

os.WIFCONTINUED = \
  :type status: int \n\
  :rtype: bool \n\

os.WIFSTOPPED = \
  :type status: int \n\
  :rtype: bool \n\

os.WIFSIGNALED = \
  :type status: int \n\
  :rtype: bool \n\

os.WIFEXITED = \
  :type status: int \n\
  :rtype: bool \n\

os.WEXITSTATUS = \
  :type status: int \n\
  :rtype: bool \n\

os.WSTOPSIG = \
  :type status: int \n\
  :rtype: bool \n\

os.WTERMSIG = \
  :type status: int \n\
  :rtype: bool \n\

os.urandom = \
  :type n: int \n\
  :rtype: bytes \n\


## 15.2. io

io.open = \
  :type name: string \n\
  :type mode: string \n\
  :type buffering: int \n\
  :type encoding: string or None \n\
  :type errors: string or None \n\
  :rtype: file \n\

io.open.1 = \
  :type mode: unicode \n\
  :rtype: io.TextIOWrapper of unicode \n\

io.open.2 = \
  :type mode: bytes \n\
  :rtype: io.FileIO of bytes \n\

io.TextIOWrapper.__enter__ = \
  :rtype: io.TextIOWrapper of unicode \n\

io.TextIOWrapper.read = \
  :rtype: unicode \n\

io.TextIOWrapper.readline = \
  :rtype: unicode \n\

io.TextIOWrapper.readlines = \
  :rtype: list of unicode \n\

io.TextIOWrapper.__iter__ = \
  :rtype: list of unicode \n\

io.TextIOWrapper.write = \
  :type s: string \n\
  :rtype: int \n\

io.FileIO.__enter__ = \
  :rtype: io.FileIO of bytes \n\

io.FileIO.read = \
  :rtype: bytes \n\

io.FileIO.readline = \
  :rtype: bytes \n\

io.FileIO.readlines = \
  :rtype: list of bytes \n\

io.FileIO.__iter__ = \
  :rtype: list of bytes \n\

io.FileIO.write = \
  :type b: string \n\
  :rtype: int \n\

io.IOBase.__init__ = \
  :rtype: io.IOBase of T \n\

io.IOBase.readlines = \
  :rtype: list of T \n\

io.IOBase.writelines = \
  :type lines: collections.Iterable of T \n\

io.IOBase.__iter__ = \
  :rtype: list of T \n\

io.IOBase.next = \
  :rtype: T \n\

io._IOBase.__init__ = \
  :rtype: io._IOBase of T \n\

io._IOBase.readlines = \
  :rtype: list of T \n\

io._IOBase.writelines = \
  :type lines: collections.Iterable of T \n\

io._IOBase.__iter__ = \
  :rtype: list of T \n\

io._IOBase.next = \
  :rtype: T \n\


## 17.1. subprocess

subprocess.Popen.__init__ = \
  :type args: string or collections.Sequence of string \n\
  :type executable: string or None \n\
  :type preexec_fn: collections.Callable or None \n\
  :type close_fds: bool or int \n\
  :type shell: bool or int \n\
  :type cwd: string or None \n\
  :type env: collections.Mapping of (string, string) \n\
  :type universal_newlines: bool or int \n\

subprocess.Popen.poll = \
  :rtype: int \n\

subprocess.Popen.wait = \
  :rtype: int \n\

subprocess.Popen.communicate = \
  :type intput: string or None \n\
  :rtype: (bytes, bytes) \n\

subprocess.Popen.send_signal = \
  :type sig: int \n\


## 18.2. json

json.loads = \
  :type s: string \n\
  :type encoding: string \n\
  :rtype: object or unknown \n\


## 18.12. base64

base64.b64encode = \
  :type s: bytes \n\
  :rtype: bytes \n\

base64.b64decode = \
  :type s: bytes \n\
  :rtype: bytes \n\


## 27.1. sys

sys.exit = \
  :type status: int or object \n\
  :rtype: None \n\


# 27.13. inspect

# Fake <type 'generator'>

__builtin__.__generator.__init__ = \
  :type value: T \n\
  :rtype: __generator of T \n\

__builtin__.__generator.__iter__ = \
  :rtype: T \n\

__builtin__.__generator.next = \
  :rtype: T \n\

__builtin__.__generator.send = \
  :rtype: T \n\

__builtin__.__generator.close = \
  :rtype: None \n\

__builtin__.__generator.throw = \
  :rtype: None \n\

